import schedule
import threading
import time
import tkinter as tk
from tkinter import scrolledtext

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
running = True
scheduler_active_1 = False
scheduler_active_2 = False

def do_something():
    log_message("–£–ª—ã–±–Ω—É—Ç—å—Å—è üòä")

def do_something_else():
    log_message("–ü–æ–º–∞—Ö–∞—Ç—å —Ä—É–∫–æ–π üëã")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
log_text = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ
def log_message(message):
    if log_text:
        log_text.insert(tk.END, message + "\n")
        log_text.yview(tk.END)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def run_scheduler():
    while running:
        if scheduler_active_1:
            schedule.run_pending()
        if scheduler_active_2:
            schedule.run_pending()
        time.sleep(0.1)

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
scheduler_thread.start()

# –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

def start_task_1():
    global scheduler_active_1
    scheduler_active_1 = True
    schedule.every(1).seconds.do(do_something).tag("task1")
    log_message("–ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞.")

def stop_task_1():
    global scheduler_active_1
    scheduler_active_1 = False
    schedule.clear("task1")
    log_message("–ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

def start_task_2():
    global scheduler_active_2
    scheduler_active_2 = True
    schedule.every(1).seconds.do(do_something_else).tag("task2")
    log_message("–í—Ç–æ—Ä–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞.")

def stop_task_2():
    global scheduler_active_2
    scheduler_active_2 = False
    schedule.clear("task2")
    log_message("–í—Ç–æ—Ä–∞—è –∑–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

def remove_task_1():
    schedule.clear("task1")
    log_message("–ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")

def remove_task_2():
    schedule.clear("task2")
    log_message("–í—Ç–æ—Ä–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")

def list_tasks():
    log_message("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
    for job in schedule.jobs:
        log_message(str(job))

# –°–æ–∑–¥–∞–Ω–∏–µ GUI
root = tk.Tk()
root.title("Task Scheduler")
root.geometry("500x300")

main_frame = tk.Frame(root)
main_frame.pack(pady=10, fill=tk.BOTH, expand=True)

button_frame = tk.Frame(main_frame)
button_frame.pack(side=tk.LEFT, padx=10, pady=10)

log_frame = tk.Frame(main_frame)
log_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

start_btn_1 = tk.Button(button_frame, text="Start 1", command=start_task_1)
stop_btn_1 = tk.Button(button_frame, text="Stop 1", command=stop_task_1)
remove_btn_1 = tk.Button(button_frame, text="Remove 1", command=remove_task_1)
start_btn_2 = tk.Button(button_frame, text="Start 2", command=start_task_2)
stop_btn_2 = tk.Button(button_frame, text="Stop 2", command=stop_task_2)
remove_btn_2 = tk.Button(button_frame, text="Remove 2", command=remove_task_2)
list_btn = tk.Button(button_frame, text="List Tasks", command=list_tasks)

start_btn_1.pack(fill=tk.X, pady=2)
stop_btn_1.pack(fill=tk.X, pady=2)
remove_btn_1.pack(fill=tk.X, pady=2)
start_btn_2.pack(fill=tk.X, pady=2)
stop_btn_2.pack(fill=tk.X, pady=2)
remove_btn_2.pack(fill=tk.X, pady=2)
list_btn.pack(fill=tk.X, pady=2)

log_text = scrolledtext.ScrolledText(log_frame, height=10, width=60)
log_text.pack(pady=10, fill=tk.BOTH, expand=True)

# –ó–∞–ø—É—Å–∫ GUI
root.mainloop()

running = False
